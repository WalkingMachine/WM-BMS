!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACS_CURRENTSENS_RATIO	acs.c	10;"	d	file:
ACS_H	acs.h	2;"	d
AD7280A_ALERT	ad72.h	36;"	d
AD7280A_AUX_ADC_1	ad72.h	23;"	d
AD7280A_AUX_ADC_2	ad72.h	24;"	d
AD7280A_AUX_ADC_3	ad72.h	25;"	d
AD7280A_AUX_ADC_4	ad72.h	26;"	d
AD7280A_AUX_ADC_5	ad72.h	27;"	d
AD7280A_AUX_ADC_6	ad72.h	28;"	d
AD7280A_AUX_ADC_OVERVOLTAGE	ad72.h	34;"	d
AD7280A_AUX_ADC_UNDERVOLTAGE	ad72.h	35;"	d
AD7280A_CB1_TIMER	ad72.h	38;"	d
AD7280A_CB2_TIMER	ad72.h	39;"	d
AD7280A_CB3_TIMER	ad72.h	40;"	d
AD7280A_CB4_TIMER	ad72.h	41;"	d
AD7280A_CB5_TIMER	ad72.h	42;"	d
AD7280A_CB6_TIMER	ad72.h	43;"	d
AD7280A_CELL_BALANCE	ad72.h	37;"	d
AD7280A_CELL_OVERVOLTAGE	ad72.h	32;"	d
AD7280A_CELL_UNDERVOLTAGE	ad72.h	33;"	d
AD7280A_CELL_VOLTAGE_1	ad72.h	17;"	d
AD7280A_CELL_VOLTAGE_2	ad72.h	18;"	d
AD7280A_CELL_VOLTAGE_3	ad72.h	19;"	d
AD7280A_CELL_VOLTAGE_4	ad72.h	20;"	d
AD7280A_CELL_VOLTAGE_5	ad72.h	21;"	d
AD7280A_CELL_VOLTAGE_6	ad72.h	22;"	d
AD7280A_CNVST_CONTROL	ad72.h	46;"	d
AD7280A_CNVST_CTRL_GATED	ad72.h	106;"	d
AD7280A_CNVST_CTRL_NOT_GATED	ad72.h	104;"	d
AD7280A_CNVST_CTRL_SINGLE	ad72.h	108;"	d
AD7280A_CONTROL	ad72.h	30;"	d
AD7280A_CONTROL2	ad72.h	31;"	d
AD7280A_CONTROL_ACQ_TIME_1200NS	ad72.h	83;"	d
AD7280A_CONTROL_ACQ_TIME_1600NS	ad72.h	84;"	d
AD7280A_CONTROL_ACQ_TIME_400NS	ad72.h	81;"	d
AD7280A_CONTROL_ACQ_TIME_800NS	ad72.h	82;"	d
AD7280A_CONTROL_CHAIN_REG_READBACK_DISABLE	ad72.h	97;"	d
AD7280A_CONTROL_CHAIN_REG_READBACK_ENABLE	ad72.h	98;"	d
AD7280A_CONTROL_CONV_AVG_BY_2	ad72.h	70;"	d
AD7280A_CONTROL_CONV_AVG_BY_4	ad72.h	71;"	d
AD7280A_CONTROL_CONV_AVG_BY_8	ad72.h	72;"	d
AD7280A_CONTROL_CONV_AVG_SINGLE	ad72.h	69;"	d
AD7280A_CONTROL_CONV_INPUT_6CELL_0ADC	ad72.h	58;"	d
AD7280A_CONTROL_CONV_INPUT_6CELL_135ADC	ad72.h	57;"	d
AD7280A_CONTROL_CONV_INPUT_6CELL_6ADC	ad72.h	56;"	d
AD7280A_CONTROL_CONV_INPUT_ADC_SELF_TEST	ad72.h	59;"	d
AD7280A_CONTROL_CONV_INPUT_READ_6VOLT_0ADC	ad72.h	63;"	d
AD7280A_CONTROL_CONV_INPUT_READ_6VOLT_135ADC	ad72.h	62;"	d
AD7280A_CONTROL_CONV_INPUT_READ_6VOLT_6ADC	ad72.h	61;"	d
AD7280A_CONTROL_CONV_INPUT_READ_DISABLE	ad72.h	64;"	d
AD7280A_CONTROL_CONV_START_FORMAT_CNVST	ad72.h	66;"	d
AD7280A_CONTROL_CONV_START_FORMAT_CS	ad72.h	67;"	d
AD7280A_CONTROL_INC_DEV_ADDR_DISABLE	ad72.h	94;"	d
AD7280A_CONTROL_INC_DEV_ADDR_ENABLE	ad72.h	95;"	d
AD7280A_CONTROL_LOCK_DEV_ADDR_DISABLE	ad72.h	91;"	d
AD7280A_CONTROL_LOCK_DEV_ADDR_ENABLE	ad72.h	92;"	d
AD7280A_CONTROL_MUST_SET	ad72.h	86;"	d
AD7280A_CONTROL_PWRDOWN_FORMAT_PD	ad72.h	74;"	d
AD7280A_CONTROL_PWRDOWN_FORMAT_SOFTWARE	ad72.h	75;"	d
AD7280A_CONTROL_SWRST_OUT_OF_RESET	ad72.h	78;"	d
AD7280A_CONTROL_SWRST_RESET	ad72.h	79;"	d
AD7280A_CONTROL_THERMISTOR_ENABLE	ad72.h	89;"	d
AD7280A_CONTROL_THERMISTOR_NOT_IN_USE	ad72.h	88;"	d
AD7280A_PD_TIMER	ad72.h	44;"	d
AD7280A_READ	ad72.h	45;"	d
AD7280A_RETRANSMIT_SCLKS	ad72.h	111;"	d
AD7280A_SELF_TEST	ad72.h	29;"	d
AD72_H	ad72.h	2;"	d
ADC_BUFFER_DEPTH	acs.h	14;"	d
ADC_GRP1_BUF_DEPTH	acs.c	9;"	d	file:
ADC_GRP1_NUM_CHANNELS	acs.c	8;"	d	file:
BATTERY_H	battery.h	2;"	d
BATTERY_HEALTH_DEAD	battery.h	/^    BATTERY_HEALTH_DEAD,$/;"	e	enum:battery_health
BATTERY_HEALTH_GOOD	battery.h	/^    BATTERY_HEALTH_GOOD,$/;"	e	enum:battery_health
BATTERY_HEALTH_OVERHEAT	battery.h	/^    BATTERY_HEALTH_OVERHEAT,$/;"	e	enum:battery_health
BATTERY_HEALTH_OVER_CURRENT	battery.h	/^    BATTERY_HEALTH_OVER_CURRENT,$/;"	e	enum:battery_health
BATTERY_HEALTH_OVER_VOLTAGE	battery.h	/^    BATTERY_HEALTH_OVER_VOLTAGE,$/;"	e	enum:battery_health
BATTERY_HEALTH_UNKNOWN	battery.h	/^    BATTERY_HEALTH_UNKNOWN,$/;"	e	enum:battery_health
BATTERY_HEALTH_UNSPECIFIED_FAILURE	battery.h	/^    BATTERY_HEALTH_UNSPECIFIED_FAILURE$/;"	e	enum:battery_health
BATTERY_STATUS_CHARGING	battery.h	/^    BATTERY_STATUS_CHARGING,$/;"	e	enum:battery_status
BATTERY_STATUS_DISCHARGING	battery.h	/^    BATTERY_STATUS_DISCHARGING,$/;"	e	enum:battery_status
BATTERY_STATUS_FULL	battery.h	/^    BATTERY_STATUS_FULL$/;"	e	enum:battery_status
BATTERY_STATUS_UNKNOWN	battery.h	/^    BATTERY_STATUS_UNKNOWN,$/;"	e	enum:battery_status
BMS_H	bms.h	9;"	d
CELL_HEALTH_DEAD	cell.h	/^    CELL_HEALTH_DEAD = 0x04,$/;"	e	enum:cell_health
CELL_HEALTH_GOOD	cell.h	/^    CELL_HEALTH_GOOD = 0x01,$/;"	e	enum:cell_health
CELL_HEALTH_OVERHEAT	cell.h	/^    CELL_HEALTH_OVERHEAT = 0x02,$/;"	e	enum:cell_health
CELL_HEALTH_OVER_VOLTAGE	cell.h	/^    CELL_HEALTH_OVER_VOLTAGE = 0x08,$/;"	e	enum:cell_health
CELL_HEALTH_UNDER_VOLTAGE	cell.h	/^    CELL_HEALTH_UNDER_VOLTAGE = 0x10,$/;"	e	enum:cell_health
CELL_HEALTH_UNKNOWN	cell.h	/^    CELL_HEALTH_UNKNOWN = 0x00,$/;"	e	enum:cell_health
CELL_HEALTH_UNSPECIFIED_FAILURE	cell.h	/^    CELL_HEALTH_UNSPECIFIED_FAILURE = 0x20$/;"	e	enum:cell_health
CELL_IS_BALANCING	cell.h	/^    CELL_IS_BALANCING = 0x01,$/;"	e	enum:cell_balancing
CELL_IS_NOT_BALANCING	cell.h	/^    CELL_IS_NOT_BALANCING = 0x00$/;"	e	enum:cell_balancing
CELL_STATUS_CHARGING	cell.h	/^    CELL_STATUS_CHARGING = 0x01,$/;"	e	enum:cell_status
CELL_STATUS_DISCHARGING	cell.h	/^    CELL_STATUS_DISCHARGING = 0x02,$/;"	e	enum:cell_status
CELL_STATUS_FULL	cell.h	/^    CELL_STATUS_FULL = 0x04$/;"	e	enum:cell_status
CELL_STATUS_UNKNOWN	cell.h	/^    CELL_STATUS_UNKNOWN = 0x00,$/;"	e	enum:cell_status
CONSOLE_H	console.h	3;"	d
CRC_DATA_READ	ad72.c	15;"	d	file:
CRC_DATA_WRITE	ad72.c	14;"	d	file:
CURRENT_IS_NEGATIVE	acs.h	/^    CURRENT_IS_NEGATIVE = 0x00$/;"	e	enum:current_direction
CURRENT_IS_POSITIVE	acs.h	/^    CURRENT_IS_POSITIVE = 0x01,$/;"	e	enum:current_direction
MAXIMUM_CURRENT	monitor.h	20;"	d
MAXIMUM_DELTA	monitor.h	19;"	d
MAX_TEMP	monitor.h	21;"	d
MAX_VOLTAGE	monitor.h	17;"	d
MINIMAL_VOLTAGE	monitor.h	18;"	d
MONITOR_H_	monitor.h	9;"	d
READ_CONVERSION	ad72.h	/^    READ_CONVERSION,$/;"	e	enum:crc_type
READ_REGISTER	ad72.h	/^    READ_REGISTER,$/;"	e	enum:crc_type
THERM_H	therm.h	2;"	d
WRITE_ALL_DISABLED	ad72.h	53;"	d
WRITE_ALL_ENABLED	ad72.h	52;"	d
WRITE_REGISTER	ad72.h	/^    WRITE_REGISTER,$/;"	e	enum:crc_type
acgCurrentSens	acs.h	/^    ADCConversionGroup *acgCurrentSens;$/;"	m	struct:acs
acgVZCR	acs.h	/^    ADCConversionGroup *acgVZCR;$/;"	m	struct:acs
acs	acs.h	/^struct acs {$/;"	s
acs	main.c	/^acs_t acs;$/;"	v
acs_disable_fault	acs.c	/^void acs_disable_fault(acs_t *acs) {$/;"	f
acs_enable_fault	acs.c	/^void acs_enable_fault(acs_t *acs) {$/;"	f
acs_init	acs.c	/^uint8_t acs_init(acs_t *acs) {$/;"	f
acs_init_hw	acs.c	/^static uint8_t acs_init_hw(acs_t *acs) {$/;"	f	file:
acs_read_currsens	acs.c	/^int32_t acs_read_currsens(acs_t *acs) {$/;"	f
acs_set_threshold	acs.c	/^uint16_t acs_set_threshold(acs_t *acs, uint8_t amps) {$/;"	f
acs_t	acs.h	/^typedef struct acs acs_t;$/;"	t	typeref:struct:acs
ad72	main.c	/^ad7280a_t ad72;$/;"	v
ad7280a	bms.h	/^typedef struct ad7280a {$/;"	s
ad7280a_balance_cell_off	ad72.c	/^void ad7280a_balance_cell_off(cell_t *cell, ad7280a_t *ad72) {$/;"	f
ad7280a_balance_cell_on	ad72.c	/^void ad7280a_balance_cell_on(cell_t *cell, ad7280a_t *ad72) {$/;"	f
ad7280a_crc_read_data_bitfield	ad72.h	/^struct ad7280a_crc_read_data_bitfield {$/;"	s
ad7280a_crc_write_data_bitfield	ad72.h	/^struct ad7280a_crc_write_data_bitfield {$/;"	s
ad7280a_packet	ad72.h	/^union ad7280a_packet {$/;"	u
ad7280a_packet_t	ad72.h	/^typedef union ad7280a_packet ad7280a_packet_t;$/;"	t	typeref:union:ad7280a_packet
ad7280a_read_cell	ad72.c	/^uint32_t ad7280a_read_cell(cell_t *cell,ad7280a_t *ad72) {$/;"	f
ad7280a_read_conversion_bitfield	ad72.h	/^struct ad7280a_read_conversion_bitfield {$/;"	s
ad7280a_read_register	ad72.c	/^uint32_t ad7280a_read_register(uint8_t address,ad7280a_t *ad72) {$/;"	f
ad7280a_read_register_bitfield	ad72.h	/^struct ad7280a_read_register_bitfield {$/;"	s
ad7280a_read_therm	ad72.c	/^uint32_t ad7280a_read_therm(therm_t *therm, ad7280a_t *ad72) {$/;"	f
ad7280a_t	bms.h	/^} ad7280a_t;$/;"	t	typeref:struct:ad7280a
ad7280a_write_register_bitfield	ad72.h	/^struct ad7280a_write_register_bitfield {$/;"	s
adCurrentSens	acs.h	/^    ADCDriver *adCurrentSens;$/;"	m	struct:acs
adVZCR	acs.h	/^    ADCDriver *adVZCR;$/;"	m	struct:acs
adc_conversion_end_CurrentSens	acs.c	/^static void adc_conversion_end_CurrentSens(ADCDriver *adcp, adcsample_t *buffer, size_t n) {$/;"	f	file:
adc_conversion_end_VZCR	acs.c	/^static void adc_conversion_end_VZCR(ADCDriver *adcp, adcsample_t *buffer, size_t n) {$/;"	f	file:
adc_convgroup_config_CurrentSens	acs.c	/^static ADCConversionGroup adc_convgroup_config_CurrentSens= {$/;"	v	file:
adc_convgroup_config_VZCR	acs.c	/^static ADCConversionGroup adc_convgroup_config_VZCR= {$/;"	v	file:
adc_error	acs.c	/^static void adc_error(ADCDriver *adcp, adcerror_t err) {$/;"	f	file:
batt	main.c	/^battery_t batt;$/;"	v
battery	battery.h	/^struct battery {$/;"	s
battery_get_health	battery.c	/^battery_health_t battery_get_health(battery_t *bat) {$/;"	f
battery_get_status	battery.c	/^battery_status_t battery_get_status(battery_t *bat) {$/;"	f
battery_get_temperature	battery.c	/^uint32_t battery_get_temperature(battery_t *bat) {$/;"	f
battery_get_voltage	battery.c	/^uint32_t battery_get_voltage(battery_t *bat) {$/;"	f
battery_health	battery.h	/^enum battery_health {$/;"	g
battery_health_t	battery.h	/^typedef enum battery_health battery_health_t;$/;"	t	typeref:enum:battery_health
battery_init	battery.c	/^void battery_init(battery_t bat[]) {$/;"	f
battery_on_health_update	battery.c	/^void battery_on_health_update(battery_t *bat) {$/;"	f
battery_on_status_update	battery.c	/^void battery_on_status_update(battery_t *bat) {$/;"	f
battery_status	battery.h	/^enum battery_status {$/;"	g
battery_status_t	battery.h	/^typedef enum battery_status battery_status_t;$/;"	t	typeref:enum:battery_status
battery_t	battery.h	/^typedef struct battery battery_t;$/;"	t	typeref:struct:battery
bit_pattern	ad72.h	/^    uint32_t bit_pattern: 3; \/\/BitPattern must be 010$/;"	m	struct:ad7280a_write_register_bitfield
bms	bms.h	/^struct bms {$/;"	s
bms	main.c	/^bms_t bms;$/;"	v
bms_t	bms.h	/^typedef struct bms bms_t;$/;"	t	typeref:struct:bms
bus_write	ad72.c	/^void bus_write(ad7280a_t *ad72, uint8_t reg, uint32_t data, uint32_t write_all) {$/;"	f
canbus_thread	main.c	/^static void canbus_thread(void *arg) {$/;"	f	file:
cell_H	cell.h	2;"	d
cell_balancing	cell.h	/^enum cell_balancing {$/;"	g
cell_balancing_t	cell.h	/^typedef enum cell_balancing cell_balancing_t;$/;"	t	typeref:enum:cell_balancing
cell_get_health	cell.c	/^cell_health_t cell_get_health(cell_t *cell) {$/;"	f
cell_get_status	cell.c	/^cell_status_t cell_get_status(cell_t *cell) {$/;"	f
cell_get_temperature	cell.c	/^uint32_t cell_get_temperature(cell_t *cell) {$/;"	f
cell_get_voltage	cell.c	/^uint32_t cell_get_voltage(cell_t *cell) {$/;"	f
cell_health	cell.h	/^typedef enum cell_health {$/;"	g
cell_health_t	cell.h	/^} cell_health_t;$/;"	t	typeref:enum:cell_health
cell_id	cell.h	/^    uint32_t cell_id;$/;"	m	struct:__anon1
cell_init	cell.c	/^void cell_init(cell_t cell[], ad7280a_t *ad72) {$/;"	f
cell_is_balancing	cell.c	/^uint8_t cell_is_balancing(cell_t *cell) {$/;"	f
cell_on_health_update	cell.c	/^void cell_on_health_update(cell_t *cell) {$/;"	f
cell_on_power_update	cell.c	/^void cell_on_power_update(cell_t *cell) {$/;"	f
cell_on_status_update	cell.c	/^void cell_on_status_update(cell_t *cell) {$/;"	f
cell_status	cell.h	/^typedef enum cell_status {$/;"	g
cell_status_t	cell.h	/^} cell_status_t;$/;"	t	typeref:enum:cell_status
cell_t	cell.h	/^} cell_t;$/;"	t	typeref:struct:__anon1
cellbalance	bms.h	/^    uint32_t cellbalance;$/;"	m	struct:ad7280a
cells	main.c	/^cell_t cells[6];$/;"	v
channel_address	ad72.h	/^    uint32_t channel_address: 4;$/;"	m	struct:ad7280a_read_conversion_bitfield
console	console.h	/^typedef struct console {$/;"	s
console	main.c	/^console_t console;$/;"	v
consolePrintStatus	console.c	/^void consolePrintStatus(cell_t cells[], console_t *console, acs_t *acs,$/;"	f
console_init	console.c	/^void console_init(struct console *c) {$/;"	f
console_read	console.c	/^int16_t console_read(struct console *c, uint8_t *buffer, uint16_t count) {$/;"	f
console_readline	console.c	/^int16_t console_readline(struct console *c, uint8_t *buffer, uint16_t count) {$/;"	f
console_t	console.h	/^}console_t;$/;"	t	typeref:struct:console
console_write	console.c	/^int16_t console_write(struct console *c, const char *buffer) {$/;"	f
console_writeline	console.c	/^int16_t console_writeline(console_t *c, const char *buffer) {$/;"	f
conversion_data	ad72.h	/^    uint32_t conversion_data: 12;$/;"	m	struct:ad7280a_read_conversion_bitfield
crc	ad72.h	/^    uint32_t crc: 8;$/;"	m	struct:ad7280a_read_conversion_bitfield
crc	ad72.h	/^    uint32_t crc: 8;$/;"	m	struct:ad7280a_read_register_bitfield
crc	ad72.h	/^    uint32_t crc: 8;$/;"	m	struct:ad7280a_write_register_bitfield
crc_conv_check	ad72.c	/^uint8_t crc_conv_check(ad7280a_t *ad72) {$/;"	f
crc_r_data	ad72.h	/^  struct ad7280a_crc_read_data_bitfield crc_r_data;$/;"	m	union:ad7280a_packet	typeref:struct:ad7280a_packet::ad7280a_crc_read_data_bitfield
crc_type	ad72.h	/^typedef enum crc_type {$/;"	g
crc_type_t	ad72.h	/^}crc_type_t;$/;"	t	typeref:enum:crc_type
crc_w_data	ad72.h	/^  struct ad7280a_crc_write_data_bitfield crc_w_data;$/;"	m	union:ad7280a_packet	typeref:struct:ad7280a_packet::ad7280a_crc_write_data_bitfield
current	acs.h	/^    uint32_t current;$/;"	m	struct:acs
current_direction	acs.h	/^    current_direction_t current_direction;$/;"	m	struct:acs
current_direction	acs.h	/^typedef enum current_direction {$/;"	g
current_direction_t	acs.h	/^} current_direction_t;$/;"	t	typeref:enum:current_direction
dac_buffer	acs.c	/^uint16_t dac_buffer = 2048;$/;"	v
dac_config	acs.c	/^static DACConfig dac_config = {$/;"	v	file:
daccb	acs.c	/^static void daccb(DACDriver *dacp) {$/;"	f	file:
dacerrcb	acs.c	/^static void dacerrcb(DACDriver *dacp) {$/;"	f	file:
data	ad72.h	/^    uint32_t data: 21;$/;"	m	struct:ad7280a_crc_write_data_bitfield
data	ad72.h	/^    uint32_t data: 22;$/;"	m	struct:ad7280a_crc_read_data_bitfield
data	ad72.h	/^    uint32_t data: 8;$/;"	m	struct:ad7280a_read_register_bitfield
data	ad72.h	/^    uint32_t data: 8;$/;"	m	struct:ad7280a_write_register_bitfield
dc	acs.h	/^    DACConfig *dc;$/;"	m	struct:acs
dd	acs.h	/^    DACDriver *dd;$/;"	m	struct:acs
delay_ms	acs.h	/^    uint32_t delay_ms;$/;"	m	struct:acs
delay_ms	bms.h	/^    uint8_t delay_ms;$/;"	m	struct:ad7280a
device_address	ad72.h	/^    uint32_t device_address: 5;  \/\/0x00 By Default$/;"	m	struct:ad7280a_read_register_bitfield
device_address	ad72.h	/^    uint32_t device_address: 5;  \/\/0x00 By Default$/;"	m	struct:ad7280a_write_register_bitfield
device_address	ad72.h	/^    uint32_t device_address: 5; \/\/0x00 By Default$/;"	m	struct:ad7280a_read_conversion_bitfield
do_crc8	ad72.c	/^uint8_t do_crc8(ad7280a_packet_t *packet, crc_type_t crc) {$/;"	f
fault	acs.h	/^    uint32_t fault;       \/\/ Fault State (Active LOW)$/;"	m	struct:acs
fault_en	acs.h	/^    uint8_t fault_en;     \/\/ Enables Overcurrent Faulting when High$/;"	m	struct:acs
health	battery.h	/^    battery_health_t health;$/;"	m	struct:battery
health	cell.h	/^    cell_health_t health;$/;"	m	struct:__anon1
init_ad7280a	ad72.c	/^uint8_t init_ad7280a(ad7280a_t *ad72) {$/;"	f
init_bms	bms.c	/^void init_bms(bms_t *bms) {$/;"	f
is_balancing	cell.h	/^    cell_balancing_t is_balancing;$/;"	m	struct:__anon1
itoa	console.c	/^char* itoa(int i, char b[]) {$/;"	f
ls_spicfg	ad72.c	/^static const SPIConfig ls_spicfg = {$/;"	v	file:
main	main.c	/^int main(int argc, char *argv[]) {$/;"	f
monitor_cellbalance	monitor.c	/^void monitor_cellbalance(cell_t cells[], ad7280a_t *ad72) {$/;"	f
monitor_current	monitor.c	/^void monitor_current(acs_t *acs) {$/;"	f
monitor_health_check	monitor.c	/^void monitor_health_check(battery_t *battery, cell_t cells[], acs_t *acs) {$/;"	f
monitor_temperature	monitor.c	/^void monitor_temperature(cell_t cells[], therm_t therm[], ad7280a_t *ad72,$/;"	f
monitor_thread	main.c	/^static void monitor_thread(void *arg) {$/;"	f	file:
monitor_voltage	monitor.c	/^void monitor_voltage(cell_t cells[], ad7280a_t *ad72, battery_t *batt) {$/;"	f
mtx	main.c	/^static Mutex mtx; \/* Mutex declaration *\/$/;"	v	file:
on_off	bms.h	/^    uint32_t on_off;$/;"	m	struct:ad7280a
packed	ad72.h	/^  uint32_t packed;$/;"	m	union:ad7280a_packet
padding	ad72.h	/^    uint32_t padding: 10; \/\/Not used during CRC$/;"	m	struct:ad7280a_crc_read_data_bitfield
padding	ad72.h	/^    uint32_t padding: 11; \/\/Not used during CRC$/;"	m	struct:ad7280a_crc_write_data_bitfield
power_down_ad7280a	ad72.c	/^void power_down_ad7280a(ad7280a_t *ad72) {$/;"	f
power_up_ad7280a	ad72.c	/^void power_up_ad7280a(ad7280a_t *ad72) {$/;"	f
present	bms.h	/^    uint8_t present;$/;"	m	struct:therm
progname	bms.h	/^    char *progname;$/;"	m	struct:bms
r_conversion	ad72.h	/^  struct ad7280a_read_conversion_bitfield r_conversion;$/;"	m	union:ad7280a_packet	typeref:struct:ad7280a_packet::ad7280a_read_conversion_bitfield
r_register	ad72.h	/^  struct ad7280a_read_register_bitfield r_register;$/;"	m	union:ad7280a_packet	typeref:struct:ad7280a_packet::ad7280a_read_register_bitfield
register_address	ad72.h	/^    uint32_t register_address: 6;$/;"	m	struct:ad7280a_read_register_bitfield
register_address	ad72.h	/^    uint32_t register_address: 6;$/;"	m	struct:ad7280a_write_register_bitfield
reserved	ad72.h	/^    uint32_t reserved: 1;$/;"	m	struct:ad7280a_write_register_bitfield
reserved	ad72.h	/^    uint32_t reserved: 2;$/;"	m	struct:ad7280a_read_conversion_bitfield
reserved	ad72.h	/^    uint32_t reserved: 2;$/;"	m	struct:ad7280a_read_register_bitfield
reserved2	ad72.h	/^    uint32_t reserved2: 2;$/;"	m	struct:ad7280a_read_register_bitfield
rxbuf	bms.h	/^    uint32_t rxbuf;$/;"	m	struct:ad7280a
samplesCurrentSens	acs.h	/^    adcsample_t samplesCurrentSens[ADC_BUFFER_DEPTH];$/;"	m	struct:acs
samplesVZCR	acs.h	/^    adcsample_t samplesVZCR[ADC_BUFFER_DEPTH];$/;"	m	struct:acs
samples_average_CurrentSens	acs.c	/^static volatile int32_t samples_average_CurrentSens = 0;$/;"	v	file:
samples_average_VZCR	acs.c	/^static volatile int32_t samples_average_VZCR = 0;$/;"	v	file:
sc	console.h	/^    SerialConfig *sc;$/;"	m	struct:console
sd	console.h	/^    SerialDriver *sd;$/;"	m	struct:console
serial1_config	console.c	/^static SerialConfig serial1_config = {$/;"	v	file:
spi_exchange	ad72.c	/^uint32_t spi_exchange(ad7280a_t *ad72) {$/;"	f
status	battery.h	/^    battery_status_t status;$/;"	m	struct:battery
status	cell.h	/^    cell_status_t status;$/;"	m	struct:__anon1
temperature	battery.h	/^    uint32_t temperature;$/;"	m	struct:battery
temperature	bms.h	/^    uint32_t temperature;$/;"	m	struct:therm
temperature	cell.h	/^    uint32_t temperature;$/;"	m	struct:__anon1
therm	bms.h	/^typedef struct therm {$/;"	s
therm_id	bms.h	/^    uint8_t therm_id;$/;"	m	struct:therm
therm_init	therm.c	/^void therm_init(therm_t therm[]) {$/;"	f
therm_read_temp	therm.c	/^void therm_read_temp(therm_t therm[], ad7280a_t *ad72) {$/;"	f
therm_t	bms.h	/^} therm_t;$/;"	t	typeref:struct:therm
therms	main.c	/^therm_t therms[2];$/;"	v
threshold	acs.h	/^    uint32_t threshold;   \/\/ Current threshold (0A to 102A)$/;"	m	struct:acs
txbuf	bms.h	/^    uint32_t txbuf;$/;"	m	struct:ad7280a
vi_out	acs.h	/^    int32_t vi_out;      \/\/ Analog Voltage coming from the ACS$/;"	m	struct:acs
voltage	battery.h	/^    uint32_t voltage;$/;"	m	struct:battery
voltage	cell.h	/^    uint32_t voltage;$/;"	m	struct:__anon1
vzcr	acs.h	/^    int32_t vzcr;        \/\/ Analog Zero Current Reference$/;"	m	struct:acs
w_register	ad72.h	/^  struct ad7280a_write_register_bitfield w_register;$/;"	m	union:ad7280a_packet	typeref:struct:ad7280a_packet::ad7280a_write_register_bitfield
write_ack	ad72.h	/^    uint32_t write_ack: 1;$/;"	m	struct:ad7280a_read_conversion_bitfield
write_ack	ad72.h	/^    uint32_t write_ack: 1;$/;"	m	struct:ad7280a_read_register_bitfield
write_all	ad72.h	/^    uint32_t write_all: 1;$/;"	m	struct:ad7280a_write_register_bitfield
